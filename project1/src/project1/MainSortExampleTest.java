package project1;
//designed by maohua zheng 10-16 version 0.01
// a small design and framework for this project.
//heavy design may happen in my android app application
public class MainSortExampleTest {

	public static ISorting[] sortObjects={new MergeThreeWaySort<Integer>(),
										  new InsertionSort<Integer>(),
										  new QuickSort<Integer>(),
										  new HeapSort<Integer>(),
										  new MergeSort<Integer>(),
										  
										  };
	
	@SuppressWarnings("unchecked")
	public static void main(String [ ] args)
	{
		IntArray intArray =new IntArray("dataSettings.xml");//load data sets and info from datasetting.xml
		for(int i=0;i<intArray.DataSetsTotal();i++)
		{
			intArray.load(i);
			
			for(ISorting sortObject:sortObjects){
				intArray.reSet();
				
				SortingArray<Integer> sortObj=(SortingArray<Integer>)sortObject;
				sortObj.setArray(intArray.getIntegerArray());
				long startTime = System.nanoTime();
				sortObject.sort();	
				long endTime = System.nanoTime();
				intArray.printOut(i);
				System.out.println(" time:="+Long.toString(endTime-startTime)+ 
								   " compare times:"+Long.toString(sortObject.getComparTimes())+
								   " algorithms="+sortObject.getSortName());
				
				//output the sorting result in the console
				//for(int number:intArray.getIntegerArray()){
					//System.out.println(number);
				 //} 
				
			}
		}
		
			/*/gegerate code from datagenerateModel class. just for test use
			 * 
			final int [] sizes={10000};//00,2000,4000,8000};
			final DataGenerateModel[] models={DataGenerateModel.random,
												  //DataGenerateModel.sorted,
												  //DataGenerateModel.revesr_sort,
												 // DataGenerateModel.identical
												  };
			final int value=1234;
			for(DataGenerateModel model:models) // same model different size and different sorting algorithms
				for(int size:sizes){     // size second
					intArray.load(model,size,value);
					for(ISorting sortObject:sortObjects){
						//reset the data to the same on different sorting algorithms
						intArray.reSet();
						
						SortingArray<Integer> sortObj=(SortingArray<Integer>)sortObject;					
						sortObj.setArray(intArray.getIntegerArray());
						sortObject.sort();	
						
						System.out.println("sort result "+
											" algorithms name:"+sortObj.getSortName()+
											"      model:"+model.toString()+
											" size:"+String.valueOf(size));
						for(int i:intArray.getIntegerArray()){
							System.out.println(i);
						 } 
										
					}
				}
			} */ //test for data generated by a data generate not from txt file
	}
	
	//end class
}
